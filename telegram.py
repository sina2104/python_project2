import config
import requests
from bs4 import BeautifulSoup as our_BS
from telebot import types
from aiogram import Bot, Dispatcher, executor, types
from sqlighter import SQLighter


bot = Bot(token=config.TOKEN)
d_bot = Dispatcher(bot)
sq = SQLighter('sql_base.db')


@d_bot.message_handler(commands=['start', 'help'])
async def welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è")
    item2 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ –Ω–µ–¥–µ–ª–∏")
    item3 = types.KeyboardButton("–ù–æ–≤–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è")

    markup.add(item1, item2, item3)

    await bot.send_message(message.chat.id,
                                          "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
                                          "–Ø - Sina_moscow_bot,\n"
                                          "–±–æ—Ç –≤ –∫–æ—Ç–æ—Ä–æ–º –°–∏–Ω–∞ —Å–∫–∞–∂–µ—Ç —Ç–µ–±–µ –≤—Å—ë, —á—Ç–æ –º–æ—Å–∫–≤–∏—á—É –Ω–∞–¥–æ!\n"
                                          "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ /subscribe".format(
                                           message.from_user, bot.get_me()),
                                          parse_mode='html', reply_markup=markup)
    d_bot.message_handler(content_types=['text'])


@d_bot.message_handler(commands=['subscribe', 'sub'])
async def subscribe(message: types.Message):
    if (not sq.subscriber_exists(message.from_user.id)):
        # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        sq.add_subscriber(message.from_user.id)

    else:
        # –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        sq.update_subscription(message.from_user.id, True)
    print(sq.get_subscriptions(True))
    await message.answer(
        "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!")


@d_bot.message_handler(commands=['unsubscribe', 'unsub'])
async def unsubscribe(message: types.Message):
    if (not sq.subscriber_exists(message.from_user.id)):
        # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π (–∑–∞–ø–æ–º–∏–Ω–∞–µ–º)
        sq.add_subscriber(message.from_user.id, False)
        await message.answer("–í—ã –∏—Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
    else:
        # –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        sq.update_subscription(message.from_user.id, False)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")


@d_bot.message_handler(content_types=['text'])
async def get_message(message):
    weather = requests.get(config.WEATHER)
    news = requests.get(config.NEWS)
    html = our_BS(weather.content, 'html.parser')
    html_news = our_BS(news.content, 'html.parser')
    if message.chat.type == 'private':
        if message.text == '–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è':
            text = html.select('#content .wDescription .description')[0].text
            temp = html.select('#blockDays .today-temp')[0].text
            time = html.select('#blockDays .today-time')[0].text
            date = html.select('#bd1 .date')[0].text
            month = html.select('#bd1 .month')[0].text
            t_min = html.select('#bd1 .temperature .min')[0].text
            t_max = html.select('#bd1 .temperature .max')[0].text
            t_day = html.select('#bd1 .day-link')[0].text
            await bot.send_message(message.chat.id, f"C–µ–≥–æ–¥–Ω—è {t_day} {date} {month}\n\n{time} {temp}\n\n"
                                              f"{t_min}, {t_max}\n\n{text}")


        elif message.text == '–ü–æ–≥–æ–¥–∞ –Ω–µ–¥–µ–ª–∏':
            await bot.send_message(message.chat.id, f"–ø–æ–≥–æ–¥–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:\n")
            for i in range(1, 7):
                month = html.select(f"#bd{i} .month")[0].text
                t_min = html.select(f"#bd{i} .temperature .min")[0].text
                t_max = html.select(f"#bd{i}  .temperature .max")[0].text
                t_day = html.select(f"#bd{i} .day-link")[0].text
                date = html.select(f"#bd{i} .date")[0].text
                await bot.send_message(message.chat.id, f"{t_day} {date} {month}\n\n{t_min},{t_max}")
        elif message.text == '–ù–æ–≤–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è':
            items = html_news.findAll('div', class_="list-item")
            all_news = []
            for item in items:
                all_news.append(
                    item.find('a', class_="list-item__title color-font-hover-only").get_text(strip=True)
                )
            for news in all_news:
                await bot.send_message(message.chat.id, news)
        else:
            await bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢')


if __name__ == '__main__':
    executor.start_polling(d_bot, skip_updates=True)

